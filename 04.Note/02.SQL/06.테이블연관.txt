
>>>>>>> 관계형 데이터베이스 에서 사용하는 테이블 연관시키기 <<<<<
제약조건을 사용하여 표현!
1)기본키(Primary Key) - 유일한 레코드 구분키
2)외래키(Foreign Key) - 다른 참조 테이블의 기본키를 가져옴

[테이블 구성]
1. 회원테이블: member_info
-> 기본키 : `idx`,`mail`
2. 주문테이블 : order
    1) 주문순번 : odno - int 자동증가 (기본키)
    2) 회원번호 : idx - int (외래키-`member_info`.`idx`)
    3) 주문번호 : odcd - int NOT null unique
    4) 상품명 : gnm - varchar(100)
    5) 주문날짜 : ctime - timestamp

예시)
CREATE TABLE `order` (
    odno int not null AUTO_INCREMENT,
    idx int,
    odcd int NOT null UNIQUE,
    gnm varchar(100),
    ctime timestamp,
    PRIMARY KEY (`odno`),
    FOREIGN KEY (`idx`) REFERENCES `member_info`(`idx`)
);

->>>>> 외래키는 <<<<<<<
FOREIGN KEY (`컬럼명`) REFERENCES `참조테이블명`(`참조컬럼`)

->>>>> 유일키는 <<<<<<<
데이터 제약조건으로 UNIQUE 키워드를 사용한다!

>>> 데이터 넣기 <<<<<
예시)
INSERT INTO `order` (`idx`,`odcd`,`gnm`)
VALUES (873,12125899,"구두");
INSERT INTO `order` (`idx`,`odcd`,`gnm`)
VALUES (333,34565899,"시계");
INSERT INTO `order` (`idx`,`odcd`,`gnm`)
VALUES (474,45123366,"반지");
INSERT INTO `order` (`idx`,`odcd`,`gnm`)
VALUES (78,45456687,"스마트폰");
INSERT INTO `order` (`idx`,`odcd`,`gnm`)
VALUES (657,78785699,"드레스");



>>>>>>>> 조인(join) <<<<<<<<<<<<<<
-> 관계형 데이터 베이스에서 테이블 간 기본키와 외래키로 관계가
설정되어 있을때 이를 연결하여 선택할 수 있는 방법!

예시) 회원테이블(member_info)과 주문테이블(order)을 조인하여
새로운 선택을 하시오!
-> 기본개념: 기본키와 외래키로 연결된 컬럼으로 조인하여
양쪽 테이블에 사용되는 특정 컬럼을 가져온다!

예시코드)

SELECT 
`odcd` AS "주문번호", 
`gnm` AS "주문상품", 
`ctime` AS "주문일시", 
`member_info`.`name` AS "구매자",
`member_info`.`city` AS "사는곳",
`member_info`.`mail` AS "이메일"
FROM `order`
INNER JOIN `member_info`
ON `order`.`idx` = `member_info`.`idx`

->>>>>> 이너조인 사용코드 : <<<<<<<<<<<<<
INNER JOIN `조인할테이블명`
ON `현재테이블명`.`외래키컬럼명` = `조인할테이블명`.`기본키컬럼명`

참조))) 보통 테이블을 조인할 경우 양쪽컬럼중 어디 속하는지 명시할때
    -> 테이블명.컬럼명
    형식을 사용한다!



>>>>>>> 유니온(UNION) <<<<<<<<<<<<
- 어떤 테이블에 데이터가 너무 많아지면 같은 구조의 다른 테이블을
다시 새로 만들어서 사용하는 경우가 많다. 이는 DB쿼리 속도가 
느려지기 때문이다. 검색을 할 경우 이전데이터가 모두 필요한데
이때 유니온으로 두 테이블을 한꺼번에 묶어서 처리할 수 있다!

SELECT column_name(s) FROM table1
UNION
SELECT column_name(s) FROM table2;

※주의사항: 두 테이블의 스키마 구조가 똑같아야함!


>>>>> ORDER BY <<<<<<<<<
데이터 선택시 정렬 순서
1) ORDER BY 컬럼명 DESC - 내림차순
2) ORDER BY 컬럼명 ASC - 오름차순
3) 순차적 적용 정렬: 순서대로 첫번째, 두번째, 세번째 기준순
    ORDER BY 컬럼명 DESC, 컬럼명 ASC, ...

예시)
SELECT * FROM `member_info`
ORDER BY `gender` ASC, `name` ASC


>>>>>>>> 테이블 데이터 모두 지우기 (초기화) <<<<<<<<<

TRUNCATE TABLE 테이블명;

- 특징: 기존 DELETE문으로 지울경우 모두 지워도 처음 입력되는 데이터가
자동증가 컬럼이 마지막 입력다음번호부터 입력된다!
TRUNCATE TABLE 로 지울 경우 자동증가 컬럼도 초기화 되어
다시 새로입력하면 1번부터 입력된다!

예시)
TRUNCATE TABLE `drama_info`;












